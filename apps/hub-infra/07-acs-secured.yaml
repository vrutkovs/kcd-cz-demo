apiVersion: platform.stackrox.io/v1alpha1
kind: SecuredCluster
metadata:
  name: hub
  namespace: stackrox
  annotations:
    argocd.argoproj.io/sync-wave: "7"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  monitoring:
    openshift:
      enabled: true
  auditLogs:
    collection: Auto
  admissionControl:
    listenOnUpdates: true
    bypass: BreakGlassAnnotation
    contactImageScanners: DoNotScanInline
    listenOnCreates: true
    replicas: 3
    timeoutSeconds: 20
    listenOnEvents: true
  scanner:
    analyzer:
      scaling:
        autoScaling: Enabled
        maxReplicas: 5
        minReplicas: 2
        replicas: 3
    scannerComponent: AutoSense
  perNode:
    collector:
      collection: EBPF
      imageFlavor: Regular
    taintToleration: TolerateTaints
  clusterName: hub
  centralEndpoint: 'central.stackrox:443'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "7"
  name: create-cluster-init
  namespace: stackrox
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - patch
      - update
  - apiGroups:
      - platform.stackrox.io
    resources:
      - securedclusters
    verbs:
      - get
      - list
      - patch
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-cluster-init
  namespace: stackrox
  annotations:
    argocd.argoproj.io/sync-wave: "7"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: create-cluster-init
subjects:
  - kind: ServiceAccount
    name: create-cluster-init
    namespace: stackrox
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-cluster-init
  namespace: stackrox
  annotations:
    argocd.argoproj.io/sync-wave: "7"
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "7"
  name: create-cluster-init-bundle
  namespace: stackrox
spec:
  template:
    spec:
      containers:
        - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: central-htpasswd
                  key: password
            - name: CLUSTER_NAME
              value: hub
          command:
            - /bin/bash
            - -c
            - |
              #!/usr/bin/env bash
              if kubectl get secret/sensor-tls &> /dev/null; then
                echo "cluster-init bundle has already been configured, doing nothing"
                exit 0
              else

                # Wait for central to be ready
                attempt_counter=0
                max_attempts=20
                echo "Waiting for central to be available..."
                until $(curl -k --output /dev/null --silent --head --fail https://central); do
                    if [ ${attempt_counter} -eq ${max_attempts} ];then
                      echo "Max attempts reached"
                      exit 1
                    fi

                    printf '.'
                    attempt_counter=$(($attempt_counter+1))
                    echo "Made attempt $attempt_counter, waiting..."
                    sleep 5
                done

                echo "Configuring cluster-init bundle"
                export DATA={\"name\":\"${CLUSTER_NAME}\"}
                curl -k -o /tmp/bundle.json -X POST -u "admin:$PASSWORD" -H "Content-Type: application/json" --data $DATA https://central/v1/cluster-init/init-bundles

                echo "Bundle received"
                cat /tmp/bundle.json

                echo "Applying bundle"
                # No jq in container, python to the rescue
                cat /tmp/bundle.json | python3 -c "import sys, json; print(json.load(sys.stdin)['kubectlBundle'])" | base64 -d | oc apply -f -
                # Touch SecuredCluster to force operator to reconcile
                oc label SecuredCluster ${CLUSTER_NAME} cluster-init-job-status=created

                echo "ACS Cluster init bundle generated and applied"
              fi
          imagePullPolicy: Always
          name: create-cluster-init-bundle
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: create-cluster-init
      serviceAccountName: create-cluster-init
      terminationGracePeriodSeconds: 30
